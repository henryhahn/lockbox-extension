{
    "docs": [
        {
            "location": "/", 
            "text": "Lockbox Extension\n\n\nClick below to install the Lockbox extension:\n\n\ninstall\n\n\nNote: This is a rapidly evolving prototype that will change. Any data stored\nis not guaranteed to be retained in future updates.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#lockbox-extension", 
            "text": "Click below to install the Lockbox extension:  install  Note: This is a rapidly evolving prototype that will change. Any data stored\nis not guaranteed to be retained in future updates.", 
            "title": "Lockbox Extension"
        }, 
        {
            "location": "/install/", 
            "text": "Installing the Lockbox extension\n\n\nInstalling dependencies\n\n\nTo \ninstall the project dependencies\n, you can run:\n\n\nnpm install\n\n\n\n\nBuilding the source code\n\n\nTo \nbuild the project\n, you can run:\n\n\nnpm run-script build\n\n\n\n\nThis puts all the necessary files in the \ndist/\n directory, which you can then\ntemporarily load into Firefox (e.g. \nabout:debugging\n).\n\n\nBuilding the extension\n\n\nTo \nbuild an extension .xpi\n, you can run:\n\n\nnpm run-script package\n\n\n\n\n:warning: The resulting add-on is unsigned and likely won't work on release\nversions of Firefox. You can flip the \nxpinstall.signatures.required\n preference\non other channels accordingly.\n\n\n:warning: In preparation for Firefox 57, legacy extensions are also disabled. So\nyou'll need to flip the \nextensions.legacy.enabled\n preference, too.\n\n\nRunning the extension\n\n\nTo \nrun the extension in a Firefox Nightly\n browser, you can run:\n\n\nnpm run-script run -- -b nightly\n\n\n\n\nTo specify flags for \nrun\n to use regularly, use \nnpm config set jpm_runflags\n:\n\n\nnpm config set jpm_runflags=\n-b nightly\n\n\n\n\n\nThis way you can just run:\n\n\nnpm run run", 
            "title": "Installing"
        }, 
        {
            "location": "/install/#installing-the-lockbox-extension", 
            "text": "", 
            "title": "Installing the Lockbox extension"
        }, 
        {
            "location": "/install/#installing-dependencies", 
            "text": "To  install the project dependencies , you can run:  npm install", 
            "title": "Installing dependencies"
        }, 
        {
            "location": "/install/#building-the-source-code", 
            "text": "To  build the project , you can run:  npm run-script build  This puts all the necessary files in the  dist/  directory, which you can then\ntemporarily load into Firefox (e.g.  about:debugging ).", 
            "title": "Building the source code"
        }, 
        {
            "location": "/install/#building-the-extension", 
            "text": "To  build an extension .xpi , you can run:  npm run-script package  :warning: The resulting add-on is unsigned and likely won't work on release\nversions of Firefox. You can flip the  xpinstall.signatures.required  preference\non other channels accordingly.  :warning: In preparation for Firefox 57, legacy extensions are also disabled. So\nyou'll need to flip the  extensions.legacy.enabled  preference, too.", 
            "title": "Building the extension"
        }, 
        {
            "location": "/install/#running-the-extension", 
            "text": "To  run the extension in a Firefox Nightly  browser, you can run:  npm run-script run -- -b nightly  To specify flags for  run  to use regularly, use  npm config set jpm_runflags :  npm config set jpm_runflags= -b nightly   This way you can just run:  npm run run", 
            "title": "Running the extension"
        }, 
        {
            "location": "/user-guide/", 
            "text": "Lockbox User Guide\n\n\nFirst things first, \ninstall the extension\n.\n\n\nCommands\n\n\n\n\nCtrl-Shift-L\n: open Lockbox editor (item management)", 
            "title": "User Guide"
        }, 
        {
            "location": "/user-guide/#lockbox-user-guide", 
            "text": "First things first,  install the extension .", 
            "title": "Lockbox User Guide"
        }, 
        {
            "location": "/user-guide/#commands", 
            "text": "Ctrl-Shift-L : open Lockbox editor (item management)", 
            "title": "Commands"
        }, 
        {
            "location": "/release-notes/", 
            "text": "Lockbox Release Notes\n\n\n0.1.2-alpha\n\n\nDate: 2017-11-13\n\n\nWhat's New\n\n\n\n\nInterface styles updated to more closely match Photon design language (\n#295\n) (\n#307\n)\n\n\nImproved user interface design on welcome screen and home page (\n#300\n)\n\n\nUpdated content throughout the interface to guide the user experience (\n#165\n)\n\n\n\n\nWhat's Fixed\n\n\n\n\nClicking the toolbar (browser action) icon would not open the editor if the editor was opened and the user changed the URL (\n#262\n)\n\n\nThe toolbar icon did not invert to light colors on dark themes (\n#306\n)\n\n\n\n\nKnown Issues\n\n\n\n\nThis is pre-release software subject to change. Your data may not be retained.\n\n\nThere is no way to change your Lockbox master password. If you forget your master password, you'll need to start over fresh by either:\n\n\nOpening the this extension's Preferences and clicking the \"\n\ud83d\udca5\ud83d\udca3 Reset \ud83d\udca3\ud83d\udca5\n\" button; or\n\n\nUninstalling and re-installing the extension\n\n\nFirefox's default prompt to save logins is only disabled on new installs of this extension; updating Lockbox will not change your current Firefox preferences.\n\n\n\n\n0.1.1-alpha1\n\n\nDate: 2017-11-01\n\n\nWhat's Fixed\n\n\n\n\nWe added language to the first-run experience to remind testers that this is pre-release software and both \nsubject to change and data may not be retained\n.\n\n\n\n\nKnown Issues\n\n\n\n\nThere is no way to change your Lockbox master password.  If you forget your master password, you'll need to start over fresh by either:\n\n\nOpening the this extension's Preferences and clicking the \"\n\ud83d\udca5\ud83d\udca3 Reset \ud83d\udca3\ud83d\udca5\n\" button; or\n\n\nUninstalling and re-installing the extension\n\n\nFirefox's default prompt to save logins is only disabled on new installs of this extension; updating Lockbox will not change your current Firefox preferences.\n\n\n\n\n0.1.1-alpha\n\n\nDate: 2017-10-30\n\n\nWhat's New\n\n\n\n\nWhen installing this extension, Firefox will no longer prompt to save logins. Any logins saved in Firefox are still there, and you can still use it to autofill login forms, but the browser will not prompt to save new ones. This feature will be re-enabled if you uninstall Lockbox, and can be manually changed by the user in Firefox's preferences.(\n#211\n)\n\n\nYou now have the ability to reset Lockbox and start from scratch.(\n#137\n)\n\n\nFront-end validation of fields in the editor (\n#207\n)\n\n\nNew Alpha installations can now happen from \nthis page\n versus the email distribution of the link which results in a blank page after install.\n\n\n\n\nWhat's Fixed\n\n\n\n\nImproved localization including page titles (\n#225\n) and default locale consistency (\n#140\n)\n\n\nShow/Hide password field no longer resizes the window (\n#179\n)\n\n\nModal dialogs behave more consistently and even keeps entered text if the modal closes (\n#162\n)\n\n\n\n\nKnown Issues\n\n\n\n\nThere is no way to change your Lockbox master password.  If you forget your master password, you'll need to start over fresh by either:\n\n\nOpening the this extension's Preferences and clicking the \"\n\ud83d\udca5\ud83d\udca3 Reset \ud83d\udca3\ud83d\udca5\n\" button; or\n\n\nUninstalling and re-installing the extension\n\n\nFirefox's default prompt to save logins is only disabled on new installs of this extension; updating Lockbox will not change your current Firefox preferences.\n\n\n\n\n0.1.0-alpha1\n\n\nDate: 2017-10-16\n\n\nWhat's New\n\n\nThis is a pre-release of the Lockbox password manager for internal Mozilla employees.\n\n\nThis starts as a signed Firefox extension where you can:\n\n\n\n\nCreate a Lockbox account with a master password to lock/unlock your data\n\n\nView entries\n\n\nSearch entries\n\n\nAdd, edit, and delete entries\n\n\nCopy username and password to clipboard\n\n\nSubmit feedback\n\n\n\n\nKnown Issues\n\n\n\n\nLockbox has only been tested on Firefox 57 and above.  Installing on Firefox 56 or lower may not function at all.\n\n\nThere is no way to reset your Lockbox master password. If you forget your master password, you'll need to start over fresh by uninstalling and re-installing this extension.\n\n\nThis is a Lockbox account, which stays local to your Firefox installation. There is no integration with Firefox accounts to sync (yet).", 
            "title": "Release Notes"
        }, 
        {
            "location": "/release-notes/#lockbox-release-notes", 
            "text": "", 
            "title": "Lockbox Release Notes"
        }, 
        {
            "location": "/release-notes/#012-alpha", 
            "text": "Date: 2017-11-13", 
            "title": "0.1.2-alpha"
        }, 
        {
            "location": "/release-notes/#whats-new", 
            "text": "Interface styles updated to more closely match Photon design language ( #295 ) ( #307 )  Improved user interface design on welcome screen and home page ( #300 )  Updated content throughout the interface to guide the user experience ( #165 )", 
            "title": "What's New"
        }, 
        {
            "location": "/release-notes/#whats-fixed", 
            "text": "Clicking the toolbar (browser action) icon would not open the editor if the editor was opened and the user changed the URL ( #262 )  The toolbar icon did not invert to light colors on dark themes ( #306 )", 
            "title": "What's Fixed"
        }, 
        {
            "location": "/release-notes/#known-issues", 
            "text": "This is pre-release software subject to change. Your data may not be retained.  There is no way to change your Lockbox master password. If you forget your master password, you'll need to start over fresh by either:  Opening the this extension's Preferences and clicking the \" \ud83d\udca5\ud83d\udca3 Reset \ud83d\udca3\ud83d\udca5 \" button; or  Uninstalling and re-installing the extension  Firefox's default prompt to save logins is only disabled on new installs of this extension; updating Lockbox will not change your current Firefox preferences.", 
            "title": "Known Issues"
        }, 
        {
            "location": "/release-notes/#011-alpha1", 
            "text": "Date: 2017-11-01", 
            "title": "0.1.1-alpha1"
        }, 
        {
            "location": "/release-notes/#whats-fixed_1", 
            "text": "We added language to the first-run experience to remind testers that this is pre-release software and both  subject to change and data may not be retained .", 
            "title": "What's Fixed"
        }, 
        {
            "location": "/release-notes/#known-issues_1", 
            "text": "There is no way to change your Lockbox master password.  If you forget your master password, you'll need to start over fresh by either:  Opening the this extension's Preferences and clicking the \" \ud83d\udca5\ud83d\udca3 Reset \ud83d\udca3\ud83d\udca5 \" button; or  Uninstalling and re-installing the extension  Firefox's default prompt to save logins is only disabled on new installs of this extension; updating Lockbox will not change your current Firefox preferences.", 
            "title": "Known Issues"
        }, 
        {
            "location": "/release-notes/#011-alpha", 
            "text": "Date: 2017-10-30", 
            "title": "0.1.1-alpha"
        }, 
        {
            "location": "/release-notes/#whats-new_1", 
            "text": "When installing this extension, Firefox will no longer prompt to save logins. Any logins saved in Firefox are still there, and you can still use it to autofill login forms, but the browser will not prompt to save new ones. This feature will be re-enabled if you uninstall Lockbox, and can be manually changed by the user in Firefox's preferences.( #211 )  You now have the ability to reset Lockbox and start from scratch.( #137 )  Front-end validation of fields in the editor ( #207 )  New Alpha installations can now happen from  this page  versus the email distribution of the link which results in a blank page after install.", 
            "title": "What's New"
        }, 
        {
            "location": "/release-notes/#whats-fixed_2", 
            "text": "Improved localization including page titles ( #225 ) and default locale consistency ( #140 )  Show/Hide password field no longer resizes the window ( #179 )  Modal dialogs behave more consistently and even keeps entered text if the modal closes ( #162 )", 
            "title": "What's Fixed"
        }, 
        {
            "location": "/release-notes/#known-issues_2", 
            "text": "There is no way to change your Lockbox master password.  If you forget your master password, you'll need to start over fresh by either:  Opening the this extension's Preferences and clicking the \" \ud83d\udca5\ud83d\udca3 Reset \ud83d\udca3\ud83d\udca5 \" button; or  Uninstalling and re-installing the extension  Firefox's default prompt to save logins is only disabled on new installs of this extension; updating Lockbox will not change your current Firefox preferences.", 
            "title": "Known Issues"
        }, 
        {
            "location": "/release-notes/#010-alpha1", 
            "text": "Date: 2017-10-16", 
            "title": "0.1.0-alpha1"
        }, 
        {
            "location": "/release-notes/#whats-new_2", 
            "text": "This is a pre-release of the Lockbox password manager for internal Mozilla employees.  This starts as a signed Firefox extension where you can:   Create a Lockbox account with a master password to lock/unlock your data  View entries  Search entries  Add, edit, and delete entries  Copy username and password to clipboard  Submit feedback", 
            "title": "What's New"
        }, 
        {
            "location": "/release-notes/#known-issues_3", 
            "text": "Lockbox has only been tested on Firefox 57 and above.  Installing on Firefox 56 or lower may not function at all.  There is no way to reset your Lockbox master password. If you forget your master password, you'll need to start over fresh by uninstalling and re-installing this extension.  This is a Lockbox account, which stays local to your Firefox installation. There is no integration with Firefox accounts to sync (yet).", 
            "title": "Known Issues"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing\n\n\nThank you for considering and taking the time to contribute!\n\n\nThe following are guidelines for contributing to this project.\n\n\nCode of Conduct\n\n\nThis repository is governed by Mozilla's code of conduct and etiquette guidelines. For more details please see the \nMozilla Community Participation Guidelines\n and \nDeveloper Etiquette Guidelines\n.\n\n\nHow to Get Started\n\n\nPlease refer to installation and build instructions in the \ninstall documentation\n.\n\n\nHow to Report Bugs\n\n\nPlease open \na new issue in the GitHub repository\n with steps to reproduce the problem you're experiencing.\n\n\nBe sure to include as much information including screenshots, text output, and both your expected and actual results.\n\n\nHow to Request Enhancements\n\n\nFirst, please refer to the applicable \nGitHub project\n and search \nthe repository's GitHub issues\n to make sure your idea has not been (or is not still) considered.\n\n\nThen, please \ncreate a new issue in the GitHub repository\n describing your enhancement.\n\n\nBe sure to include as much detail as possible including step-by-step descriptions, specific examples, screenshots or mockups, and reasoning for why the enhancement might be worthwhile.\n\n\nPlease keep in mind, by opening an issue we provide no guarantee the enhancement will be implemented.", 
            "title": "Contributing"
        }, 
        {
            "location": "/contributing/#contributing", 
            "text": "Thank you for considering and taking the time to contribute!  The following are guidelines for contributing to this project.", 
            "title": "Contributing"
        }, 
        {
            "location": "/contributing/#code-of-conduct", 
            "text": "This repository is governed by Mozilla's code of conduct and etiquette guidelines. For more details please see the  Mozilla Community Participation Guidelines  and  Developer Etiquette Guidelines .", 
            "title": "Code of Conduct"
        }, 
        {
            "location": "/contributing/#how-to-get-started", 
            "text": "Please refer to installation and build instructions in the  install documentation .", 
            "title": "How to Get Started"
        }, 
        {
            "location": "/contributing/#how-to-report-bugs", 
            "text": "Please open  a new issue in the GitHub repository  with steps to reproduce the problem you're experiencing.  Be sure to include as much information including screenshots, text output, and both your expected and actual results.", 
            "title": "How to Report Bugs"
        }, 
        {
            "location": "/contributing/#how-to-request-enhancements", 
            "text": "First, please refer to the applicable  GitHub project  and search  the repository's GitHub issues  to make sure your idea has not been (or is not still) considered.  Then, please  create a new issue in the GitHub repository  describing your enhancement.  Be sure to include as much detail as possible including step-by-step descriptions, specific examples, screenshots or mockups, and reasoning for why the enhancement might be worthwhile.  Please keep in mind, by opening an issue we provide no guarantee the enhancement will be implemented.", 
            "title": "How to Request Enhancements"
        }, 
        {
            "location": "/code_of_conduct/", 
            "text": "Code of Conduct\n\n\nThis repository is governed by Mozilla's code of conduct and etiquette guidelines. For more details please see the \nMozilla Community Participation Guidelines\n and \nDeveloper Etiquette Guidelines\n.", 
            "title": "Code of Conduct"
        }, 
        {
            "location": "/code_of_conduct/#code-of-conduct", 
            "text": "This repository is governed by Mozilla's code of conduct and etiquette guidelines. For more details please see the  Mozilla Community Participation Guidelines  and  Developer Etiquette Guidelines .", 
            "title": "Code of Conduct"
        }, 
        {
            "location": "/api/", 
            "text": "Table of Contents", 
            "title": "API Guide"
        }, 
        {
            "location": "/api/#table-of-contents", 
            "text": "", 
            "title": "Table of Contents"
        }, 
        {
            "location": "/metrics/", 
            "text": "Lockbox Metrics Plan\n\n\nLast Updated: October 9, 2017\n\n\n\n\n\n\n\nTL;DR Metrics Implemented for Alpha Thus Far\n\n\nAnalysis\n\n\nCollection\n\n\nEvent Registration and Recording\n\n\n\n\n\n\nMetrics Overview\n\n\nNon-Event Metrics\n\n\n!!!!!!! EVERYTHING BELOW HERE IS OLD AND OUT OF DATE NOT IMPLEMENTED KEPT HERE FOR FUTURE REFERENCE ONLY !!!!!!!\n\n\nSetup Events\n\n\nItem list Interaction Events\n\n\nItem View Interaction Events\n\n\nEvents Related to Interactions in the Item Editors\n\n\nEvents Related to Submitting An Item Change from the Item Editors\n\n\nEvents Related to Changes in the Datastore\n\n\nFeedback Events\n\n\nFill Events: TBD\n\n\n\n\n\n\nReferences\n\n\n\n\n\n\n\nNote to Lockbox Engineers:\n \nThe variable names used in this doc are just placeholders. Once I know what they will actually be I can update them.\n\n\nThis is the metrics collection plan for Lockbox's alpha release. It is more of a wishlist than a plan - only some portion of what's here might actually be implemented.\n\n\nBest viewed in something that can render Markdown.\n\n\nTL;DR Metrics Implemented for Alpha Thus Far\n\n\nThese are the metrics that have been implemented in the pull request that included the edits to this doc.\n\n\nAll events are under the \ncategory: lockbox\n. The \nextra\n field always contains \nfxaid\n where possible (i.e. after FxA auth). In the future also the \nitemid\n where relevant.\n\n\n\n\n\n\nstartup\n fires when the webextension is loaded. \nmethod\n:click \nobjects\n: addon, webextension.\n\n\n\n\n\n\niconClick\n fires when someone clicks the toolbar icon. \nmethod\n:startup \nobjects\n: toolbar.\n\n\n\n\n\n\nrender\n fires when one of the views are rendered. \nmethod\n:render \nobjects\n: firstrun, manage, popupUnlock\n\n\n\n\n\n\nfxaSignIn\n fires when someone clicks the signin button during firstrun. \nmethod\n: render \nobjects\n: fxaSignInPage.\n\n\n\n\n\n\nconfirmPW\n fires when the user clicks the button to confirm their FxA pw. \nmethod\n: click \nobjects\n: confirmPWButton.\n\n\n\n\n\n\nsetupDone\n fires after the user clicks the done button to close the wizard after fxa pw has been checked. \nmethod\n: click \nobjects\n: setupDoneButton.\n\n\n\n\n\n\nitemAdding\n fires when a user submits a new item from the editor. \nmethod\n: itemAdding \nobjects\n: addItemForm.\n\n\n\n\n\n\nitemUpdating\n fires when a user submits an edit to an existing item. \nmethod\n: itemUpdating \nobjects\n: updatingItemForm.\n\n\n\n\n\n\nitemDeleting\n fires when user submits a request to delete an item. \nmethod\n: itemDeleting \nobjects\n: updatingItemForm.\n\n\n\n\n\n\nitemSelected\n fires when a user clicks on an item in the item list. \nmethod\n: itemSelected \nobjects\n: itemList.\n\n\n\n\n\n\naddClick\n fires when a user clicks the add new item button from the item list . \nmethod\n: addClick \nobjects\n: addButton.\n\n\n\n\n\n\nitemAdded\n fires when the \naddItemCompleted\n function is called on the front end. Has itemid added as extra. \nmethod\n: itemAdded \nobjects\n: addItemForm.\n\n\n\n\n\n\ndatatore\n fires when an item is added/updated/deleted from the backend.  Has itemid (and sometimes fields) added as extra. \nmethods\n:added, updated, deleted \nobjects\n: datastore.\n\n\n\n\n\n\nfeedback\n fires when the user clicks the \"Send Feedback\" button. \nmethods\n:feedbackClick \nobjects\n:manage\n\n\n\n\n\n\nAnalysis\n\n\nWe will aim to collect data that will help us understand the following (please add anything that you think is important, these are just the basics; note that not all these things will be answerable give the data we will have to work with during alpha):\n\n\n\n\nDo people Save Passwords in Lockbox?\n\n\nHow many? (count of items saved per user)\n\n\nHow often? (number of credentials saved per time interval)\n\n\n\n\n\n\nDo people create their own passwords or use Lockbox to generate them?\n\n\nRatio: (Number of times the PW generator is used when storing an item) / (number of credentials stored)\n\n\n\n\n\n\nDo people use the passwords they store on Lockbox?\n\n\nHow many times (per some unit of time) do stored credentials get auto-filled?\n\n\nHow many times do they copy a credential (e.g. to fill it in manually)\n\n\nHow many times do they reveal a credential in the CRUD editor?\n\n\n\n\n\n\nHow well does does auto-filling credentials work \n(not in alpha)\n?\n\n\nWhen credentials are auto-filled, are they filled into the correct fields?\n\n\nHow often must the user make a change to what fields were filled?\n\n\nHow to measure these things??? is there an easier way than just asking if the auto-fill didn't work?\n\n\n\n\n\n\n\n\n\n\nDo people continue to use Lockbox after first use?\n\n\nOut of those who install, how many use it more than once?\n\n\n\n\n\n\nWhere are the drop-off points in the user flow?\n\n\nDo the majority of people make it all the way through the setup process?\n\n\nOnce initially setup, do people continue to add credentials?\n\n\nDo people continue to auto-fill credentials after the first usage?\n\n\n\n\n\n\nWhat are people's opinions on LB\n\n\nFeedback forms\n\n\n\n\n\n\nDo people sync their passwords \n(not in alpha)\n?\n\n\nHow does syncing affect engagement?\n\n\n\n\n\n\nMaybe: what type of sites do people use Lockbox with \n(not in alpha)\n?\n\n\n\n\nCollection\n\n\nNote:\n \nThis is the collection plan for our internal alpha release. For our beta release will be taking advantage of test pilot's telemetry API. The metrics plan for beta will be described in a separate document.\n\n\nAt this point, all measurements related to Lockbox will be made client-side. All users will have to authenticate through FxA, and thus additional measurements related to that will be logged on the FxA auth server. We have no control over what is already collected via that mechanism.\n\n\nFor our internal alpha release, we will be making use of the public JavaScript API that allows recording and sending of event data through an add-on. \nThis means that for our alpha release we will only be collecting event-based data\n. The API is documented here:\n\n\nhttps://firefox-source-docs.mozilla.org/toolkit/components/telemetry/telemetry/collection/events.html#the-api\n\n\nOnce the events are logged in the client they should appear in \nabout:telemetry\n. From there they will be submitted in the main ping payload under \nprocesses.dynamic.events\n and available through the usual services (STMO and ATMO), as well as amplitude.\n\n\nEvent Registration and Recording\n\n\nThe events that we will record will conform to the structure expected by the telemetry pipeline. When the events are logged in telemetry they will be a list of:\n\n\n[timestamp, category, method, object, value, extra]\n\n\nThe API takes care of the timestamp for us. We just need to define \ncategory\n, \nmethod\n, \nobject\n and \nextra\n (\nvalue\n is optional and we won't use it).\n\n\nBecause we are using the API through an add-on it \nisn't\n necessary that we include an events.yaml file.\n\n\nInstead we will define our events by \nregistering\n them using a call to \nServices.telemetry.registerEvents(category, eventData)\n.\n\n\nHere's a breakdown of how a to register a typical event:\n\n\nServices.telemetry.registerEvents(\nevent_category\n, {\n    \nevent_name\n: {\n        methods: [\nclick\n, ... ], // types of events that can occur\n        objects: [\na_button\n, ... ], // objects event can occur on\n        extra: {\nkey\n: \nvalue\n, ... } // key-value pairs (strings)\n    }\n\n\n\n\nFor our purposes, we will use the \nextra\n field for a few purposes:\n\n\n\n\nTo log the FxA user id of the client logging the event (e.g. \n\"fxauid\": uid\n)\n\n\nTo log the UUID of the item that has been added or changed (e.g. \n\"item_id\": UUID\n)\n\n\nTo log the fields that are modified when an item is updated in the datastore (e.g. \n\"fields\": \"password,notes\"\n  (because the value has to be a string we will have to concat the fields that were updated somehow)\n\n\n\n\nOnce an event is registered, we can record it with:\n\n\nServices.telemetry.recordEvent(category, method, object, null, extra)\n\n\nWhen recording, we can use \nnull\n for \nvalue\n.\n\n\nSee the Events section for specific examples of event registration and recording.\n\n\nMetrics Overview\n\n\nFor alpha, we'd like to (ideally) like to be able to track the following general categories of things:\n\n\n\n\nThe setup flow, so we can know at what points (if any) people quit the flow before finishing it\n\n\nTop-level interactions centered around use of the Lockbox toolbar icon. This includes interactions within the initial pop-over that is displayed when the user clicks the icon.\n\n\nInteractions with the main CRUD editor view which lists the user's Lockbox items (credentials)\n\n\nInteractions with the add / modify dialogs used to enter / edit item information\n\n\nChanges to the datastore that actually contains the user's items, in addition to user actions that lead to those changes\n\n\nWhen the user submits feedback about lockbox\n\n\n\n\nEach of these are described below within their own Events subsection.\n\n\nNon-Event Metrics\n\n\nThese are the metrics we plan to collect regarding the state of user datastores. Note that we won't be able to record these directly for alpha. We will have to infer them from the event data.\n\n\n\n\n\n\nn_items\n The number of credentials that exist in the user's datastore. Integer\n\n\n\n\n\n\nn_notes\n The number of items for which the user has manually entered custom notes for. Integer\n\n\n\n\ntimestamp_last\n The timestamp of the last edit the user made to the datastore. Does not necessarily correspond to the last time they opened the CRUD editor.\n\n\n\n\n!!!!!!! EVERYTHING BELOW HERE IS OLD AND OUT OF DATE NOT IMPLEMENTED KEPT HERE FOR FUTURE REFERENCE ONLY !!!!!!!\n\n\nSetup Events\n\n\nFrom a metrics point of view, the FxA sign-in / account creation process is a black box to us. Thus the best we can do at this point is track when a user interacts with the Lockbox-specific views that are included in the first run flow.\n\n\nWe have two \ncategories\n of events here: rendering events and interaction events:  \nlockbox_setup.render\n and \nlockbox_setup.interaction\n. For rendering events, the \nobject\n field is populated by the name of the view being rendered; for interaction events the \nobject\n is the name of the button. Below is a brief description of the view names and their corresponding buttons.\n\n\n\n\nlockbox_toolbar_firstrun\n\n\nPop-over shown when the user first clicks on the Lockbox toolbar icon after install. Contains the \nget_started_button\n. Note that the click on the toolbar icon itself is logged in a separate event (see \"Toolbar Button Interaction Event\" section below).\n\n\n\n\n\n\nreenter_password\n\n\nShown after FxA process is completed. Prompts user to re-enter their FxA pw to start using lockbox. Contains the \nlockbox_signin_button\n\n\n\n\n\n\n\n\nThe \nmethods\n for these events are \nrender\n and \nclick\n for rendering and interaction events, respectively.\n\n\nThe \nextra\n field contains the user's FxA anonymous/random user id. For \nlockbox_toolbar_firstrun\n view this will be \nnull\n.\n\n\nTo register the rendering events:\n\n\nServices.telemetry.registerEvents(\nlockbox_setup.render\n, {\n  \nlockbox_setup.render\n: {\n    methods: [\nrender\n],\n    objects: [\nlockbox_toolbar_firstrun\n, // startup flow views\n            \nreenter_password\n],\n    extra: {\nfxauid\n: uid} // value is null in some cases, see above\n  }\n});\n\n\n\n\nTo register the interaction events:\n\n\nServices.telemetry.registerEvents(\nlockbox_setup.interaction\n, {\n  \nlockbox_setup.click\n: {\n    methods: [\nclick\n],\n    objects: [\nget_started_button\n, // start-up flow buttons\n              \nlockbox_signin_button\n],\n    extra: {\nfxauid\n: uid} // value is null in some cases, see above\n  }\n});\n\n\n\n\nAn example of how to record a rendering of the \nreenter_password\n view:\n\n\nServices.telemetry.recordEvent(\nlockbox_setup.render\n,\n                    \nrender\n,\n                    \nreenter_password\n,\n                    null,\n                    {\nfxauid\n: uid} ) // user has signed in by now);\n\n\n\n\nTo record (for example) a click on one of the \nlockboxSignin_button\n button:\n\n\nServices.telemetry.recordEvent(\nlockbox_setup.interaction\n,\n                    \nclick\n,\n                    \nlockbox_signin_button\n,\n                    null,\n                    {\nfxauid\n: null} ) // user hasn't signed in yet);\n\n\n\n\nItem list Interaction Events\n\n\nThese events relate to interactions with the item list rendered after a click of the Lockbox toolbar button. These events assume that the user has already logged in with FxA. For events related to the setup flow, see the section above.\n\n\nImmediately after setup there will be no items in the datastore. As long as this is the case, the item list will be empty and the user will have to click the \nadd_new_button\n to add their first entry. As long as there is at least one entry in the datastore, the item list will be displayed in the left pane.\n\n\nWe will have two categories of events related to the item list: \nlockbox_item_list.render\n and \nlockbox_item_list.interaction\n. They will be recorded as \nlockbox_item_list.render\n and \nlockbox_item_list.click\n.\n\n\nFor the rendering events, there are two possible objects, \nitem_list_empty\n and \nitem_list_populated\n corresponding to a rendering of an empty item list and an item list with at least one entry, respectively.\n\n\nThe possible \nmethods\n are \nclick\n and \nrender\n.\n\n\nThe \nobjects\n are \nitem_button\n (the clickable area of an entry in the item list), \nfeedback_button\n, \nadd_new_button\n (available so long as there at least one item in the datastore), and \nsearch_box\n.\n\n\nTo register the interaction events:\n\n\nServices.telemetry.registerEvents(\nlockbox_item_list.interaction\n, {\n  \nlockbox_item_list.click\n: {\n    methods: [\nclick\n],\n    objects: [\nitem_button\n,\n        \nfeedback_button\n,\n        \nadd_new_button\n,\n        \nsearch_box\n],\n    extra: {\nfxauid\n: uid}\n  }\n});\n\n\n\n\nTo register the render events:\n\n\nServices.telemetry.registerEvents(\nlockbox_item_list.render\n, {\n  \nlockbox_item_list.render\n: {\n    methods: [\nrender\n],\n    objects: [\nitem_list_empty\n,\n        \nitem_list_populated\n],\n    extra: {\nfxauid\n: uid}\n  }\n});\n\n\n\n\nTo record (for example) a click on the add new entry button:\n\n\nServices.telemetry.recordEvent(\nlockbox_item_list.interaction\n,\n                    \nclick\n,\n                    \nadd_new_button\n,\n                    null,\n                    {\nfxauid\n: uid});\n\n\n\n\nItem View Interaction Events\n\n\nWhen a user clicks on an item from the item list, they will be directed to the item view. We will log clicks on each of the five buttons in this view (also the \nobjects\n used in the event): \nedit_entry_button\n, \ndelete_entry_button\n, \nshow_password_button\n, \ncopy_password_button\n, and \ncopy_username_button\n.\n\n\nThe event \ncategory\n is \nitem_view.interaction\n and the event is recorded as \nitem_view.click\n.\n\n\nThe \nmethod\n is \nclick\n.\n\n\nExample event registration:\n\n\nServices.telemetry.registerEvents(\nlockbox_item_view.interaction\n, {\n  \nlockbox_item_view.click\n: {\n    methods: [\nclick\n],\n    objects: [\nedit_entry_button\n,\n        \ndelete_entry_button\n,\n        \nshow_password_button\n,\n        \ncopy_password_button\n,\n        \ncopy_username_button\n],\n    extra: {\nfxauid\n: uid}\n  }\n});\n\n\n\n\nExample of recording a click to show password event:\n\n\nServices.telemetry.recordEvent(\nlockbox_item_view.interaction\n,\n                    \nclick\n,\n                    \nshow_password_button\n,\n                    null,\n                    {\nfxauid\n: uid});\n\n\n\n\nEvents Related to Interactions in the Item Editors\n\n\nThese events record actions users take in the item editors. There are separate views for editing existing items and for adding new entries, though the fields that exist in each are similar. Thus we have four \ncategories\n of events: \nlockbox_new_item.interaction\n, \nlockbox_edit_item.interaction\n and the rendering events \nlockbox_new_item.render\n and \nlockbox_edit_item.render\n.\n\n\nFor events related to the submission of actual item information, see the next section. The item editors have 5 fields: \ntitle_field\n, \norigin_field\n (URL for the credential), \nusername_field\n, \npassword_field\n, and \nnotes_field\n. There are also three buttons: \nsave_entry_button\n, \ncancel_button\n, and \ntoggle_password_button\n. The latter toggles the visibility of characters in the password field.  \n\n\nThe \nmethods\n are \nclick\n and \nrender\n.\n\n\nExample event registration (Substitute \nlockbox_new_item\n with \nlockbox_edit_item\n to register events for the existing item editor):\n\n\nServices.telemetry.registerEvents(\nlockbox_new_item.interaction\n, {\n  \nlockbox_item_editor.click\n: {\n    methods: [\nclick\n],\n    objects: [\ntitle_field\n,\n        \norigin_field\n,\n        \nusername_field\n,\n        \npassword_field\n,\n        \nnotes_field\n,\n        \nsave_entry_button\n,\n        \ncancel_button\n,\n        \ntoggle_password_button\n],\n    extra: {\nfxauid\n: uid}\n  }\n});\n\n\n\n\nFor the rendering events:\n\n\nServices.telemetry.registerEvents(\nlockbox_new_item.render\n, {\n  \nlockbox_item_editor.render\n: {\n    methods: [\nrender\n],\n    objects: [\nlockbox_new_item_view\n],\n    extra: {\nfxauid\n: uid}\n  }\n});\n\n\n\n\nExample of recording a click on the \nsave_entry_button\n:\n\n\nServices.telemetry.recordEvent(\nlockbox_item_editor.interaction\n,\n                    \nclick\n,\n                    \nsave_entry_button\n,\n                    null,\n                    {\nfxauid\n: uid});\n\n\n\n\nEvents Related to Submitting An Item Change from the Item Editors\n\n\nEvents of \ncategory\n \nlockbox_item_change_submitted\n record the actual submission of new item information to the datastore (either completely new entries or updates to existing items).\n\n\nIn theory, these should be tied to equivalent events in the datastore, so that (for example) an \nadding\n event which is logged when a user submits a new item has a corresponding \nadded\n event that gets logged when the item is successfully added to the datastore. This may need to change, but for simplicity's sake I've made it as close to the datastore events as possible (see next section). These events will be recorded as \nlockbox_item_change_submitted\n.\n\n\nMethods\n for this event are \nadding\n, \nupdating\n and \ndeleting\n.\n\n\nThe \nobject\n can be \nnew_item\n or \nedit_item\n.\n\n\nThe \nextra\n field contains the item's UUID \nfor updating and deleting events only\n. For adding events, it always contains the string \"new\".\n\n\nTo register these events, we would do something like:\n\n\nServices.telemetry.registerEvents(\nlockbox_item_change_submitted\n, {\n  \nlockbox_item_change_submitted\n: {\n    methods: [\nadding\n,\nupdating\n,\ndeleting\n],\n    objects: [\nnew_item\n,\nedit_item\n],\n    extra: {\nfxauid\n: uid,\n            \nitem_id\n: UUID}\n  }\n});\n\n\n\n\nTo record a new item submission (note the \nitem_id\n is \"new\"):\n\n\nServices.telemetry.recordEvent(\nlockbox_item_change_submitted\n,\n                    \nadded\n,\n                    \nnew_item\n,\n                    null,\n                    {\nfxauid\n: uid,\n                    \nitem_id\n: \nnew\n});\n\n\n\n\nEvents Related to Changes in the Datastore\n\n\nWe will record an event of \ncategory\n \nlockbox_datastore.changed\n when there is a change to the datastore. These events will be recorded as \nlockbox_entry_changed\n.\n\n\nMethods\n for this event are \nadded\n, \nupdated\n and \ndeleted\n.\n\n\nThe \nobject\n field is always \ndatastore\n.\n\n\nThe \nextra\n field contains the item's (hashed) UUID. This will allow us to track changes to an item over its lifetime. When the method is \nupdated\n, this field also includes a list indicating which fields in the credential were updated.\n\n\nTo register these events, we would do something like:\n\n\nServices.telemetry.registerEvents(\nlockbox_datastore.changed\n, {\n  \nlockbox_entry_changed\n: {\n    methods: [\nadded\n,\nupdated\n,\ndeleted\n],\n    objects: [\ndatastore\n],\n    extra: { \nfxauid\n: uid,\n    \nitem_id\n: UUID,\n    \nfields\n: \ntitle,origins,login.password,login.notes\n }  }\n});\n\n\n\n\nAn example of logging an item update in the datastore:\n\n\nServices.telemetry.recordEvent(\nlockbox_database.changed\n,\n                    \nupdated\n,\n                    \ndatastore\n,\n                    null,\n                    {\nfxauid\n: uid,\n                    \nitem_id\n: UUID,\n                    \nfields\n: \nusername,password\n});\n\n\n\n\nFeedback Events\n\n\nWhen the user enters the feedback form through the button on the item list, we will record an event when a user submits feedback. Note that this will \nnot\n contain the feedback itself: that is logged elsewhere (not thru telemetry).\n\n\nServices.telemetry.registerEvents(\nlockbox_feedback.interaction\n, {\n  \nlockbox_feedback_submit.click\n: {\n    methods: [\nclick\n],\n    objects: [\nsubmit_button\n],\n    extra: {\nfxauid\n: uid}\n  }\n});\n\n\n\n\nTo record (for example) a click of the toolbar:\n\n\nServices.telemetry.recordEvent(\nlockbox_feedback.interaction\n,\n                    \nclick\n,\n                    \nsubmit_button\n,\n                    null,\n                    {\nfxauid\n: uid});\n\n\n\n\nFill Events: TBD\n\n\nThis section will describe the events related to auto-filling login credentials on web forms using items from the datastore. Since this isn't invented yet, its empty.\n\n\n\n\nReferences\n\n\nDocs for the Public JS API that allows us to log events thru an add-on:\n\n\nhttps://firefox-source-docs.mozilla.org/toolkit/components/telemetry/telemetry/collection/events.html#the-api", 
            "title": "Metrics Guide"
        }, 
        {
            "location": "/metrics/#lockbox-metrics-plan", 
            "text": "Last Updated: October 9, 2017    TL;DR Metrics Implemented for Alpha Thus Far  Analysis  Collection  Event Registration and Recording    Metrics Overview  Non-Event Metrics  !!!!!!! EVERYTHING BELOW HERE IS OLD AND OUT OF DATE NOT IMPLEMENTED KEPT HERE FOR FUTURE REFERENCE ONLY !!!!!!!  Setup Events  Item list Interaction Events  Item View Interaction Events  Events Related to Interactions in the Item Editors  Events Related to Submitting An Item Change from the Item Editors  Events Related to Changes in the Datastore  Feedback Events  Fill Events: TBD    References    Note to Lockbox Engineers:   The variable names used in this doc are just placeholders. Once I know what they will actually be I can update them.  This is the metrics collection plan for Lockbox's alpha release. It is more of a wishlist than a plan - only some portion of what's here might actually be implemented.  Best viewed in something that can render Markdown.", 
            "title": "Lockbox Metrics Plan"
        }, 
        {
            "location": "/metrics/#tldr-metrics-implemented-for-alpha-thus-far", 
            "text": "These are the metrics that have been implemented in the pull request that included the edits to this doc.  All events are under the  category: lockbox . The  extra  field always contains  fxaid  where possible (i.e. after FxA auth). In the future also the  itemid  where relevant.    startup  fires when the webextension is loaded.  method :click  objects : addon, webextension.    iconClick  fires when someone clicks the toolbar icon.  method :startup  objects : toolbar.    render  fires when one of the views are rendered.  method :render  objects : firstrun, manage, popupUnlock    fxaSignIn  fires when someone clicks the signin button during firstrun.  method : render  objects : fxaSignInPage.    confirmPW  fires when the user clicks the button to confirm their FxA pw.  method : click  objects : confirmPWButton.    setupDone  fires after the user clicks the done button to close the wizard after fxa pw has been checked.  method : click  objects : setupDoneButton.    itemAdding  fires when a user submits a new item from the editor.  method : itemAdding  objects : addItemForm.    itemUpdating  fires when a user submits an edit to an existing item.  method : itemUpdating  objects : updatingItemForm.    itemDeleting  fires when user submits a request to delete an item.  method : itemDeleting  objects : updatingItemForm.    itemSelected  fires when a user clicks on an item in the item list.  method : itemSelected  objects : itemList.    addClick  fires when a user clicks the add new item button from the item list .  method : addClick  objects : addButton.    itemAdded  fires when the  addItemCompleted  function is called on the front end. Has itemid added as extra.  method : itemAdded  objects : addItemForm.    datatore  fires when an item is added/updated/deleted from the backend.  Has itemid (and sometimes fields) added as extra.  methods :added, updated, deleted  objects : datastore.    feedback  fires when the user clicks the \"Send Feedback\" button.  methods :feedbackClick  objects :manage", 
            "title": "TL;DR Metrics Implemented for Alpha Thus Far"
        }, 
        {
            "location": "/metrics/#analysis", 
            "text": "We will aim to collect data that will help us understand the following (please add anything that you think is important, these are just the basics; note that not all these things will be answerable give the data we will have to work with during alpha):   Do people Save Passwords in Lockbox?  How many? (count of items saved per user)  How often? (number of credentials saved per time interval)    Do people create their own passwords or use Lockbox to generate them?  Ratio: (Number of times the PW generator is used when storing an item) / (number of credentials stored)    Do people use the passwords they store on Lockbox?  How many times (per some unit of time) do stored credentials get auto-filled?  How many times do they copy a credential (e.g. to fill it in manually)  How many times do they reveal a credential in the CRUD editor?    How well does does auto-filling credentials work  (not in alpha) ?  When credentials are auto-filled, are they filled into the correct fields?  How often must the user make a change to what fields were filled?  How to measure these things??? is there an easier way than just asking if the auto-fill didn't work?      Do people continue to use Lockbox after first use?  Out of those who install, how many use it more than once?    Where are the drop-off points in the user flow?  Do the majority of people make it all the way through the setup process?  Once initially setup, do people continue to add credentials?  Do people continue to auto-fill credentials after the first usage?    What are people's opinions on LB  Feedback forms    Do people sync their passwords  (not in alpha) ?  How does syncing affect engagement?    Maybe: what type of sites do people use Lockbox with  (not in alpha) ?", 
            "title": "Analysis"
        }, 
        {
            "location": "/metrics/#collection", 
            "text": "Note:   This is the collection plan for our internal alpha release. For our beta release will be taking advantage of test pilot's telemetry API. The metrics plan for beta will be described in a separate document.  At this point, all measurements related to Lockbox will be made client-side. All users will have to authenticate through FxA, and thus additional measurements related to that will be logged on the FxA auth server. We have no control over what is already collected via that mechanism.  For our internal alpha release, we will be making use of the public JavaScript API that allows recording and sending of event data through an add-on.  This means that for our alpha release we will only be collecting event-based data . The API is documented here:  https://firefox-source-docs.mozilla.org/toolkit/components/telemetry/telemetry/collection/events.html#the-api  Once the events are logged in the client they should appear in  about:telemetry . From there they will be submitted in the main ping payload under  processes.dynamic.events  and available through the usual services (STMO and ATMO), as well as amplitude.", 
            "title": "Collection"
        }, 
        {
            "location": "/metrics/#event-registration-and-recording", 
            "text": "The events that we will record will conform to the structure expected by the telemetry pipeline. When the events are logged in telemetry they will be a list of:  [timestamp, category, method, object, value, extra]  The API takes care of the timestamp for us. We just need to define  category ,  method ,  object  and  extra  ( value  is optional and we won't use it).  Because we are using the API through an add-on it  isn't  necessary that we include an events.yaml file.  Instead we will define our events by  registering  them using a call to  Services.telemetry.registerEvents(category, eventData) .  Here's a breakdown of how a to register a typical event:  Services.telemetry.registerEvents( event_category , {\n     event_name : {\n        methods: [ click , ... ], // types of events that can occur\n        objects: [ a_button , ... ], // objects event can occur on\n        extra: { key :  value , ... } // key-value pairs (strings)\n    }  For our purposes, we will use the  extra  field for a few purposes:   To log the FxA user id of the client logging the event (e.g.  \"fxauid\": uid )  To log the UUID of the item that has been added or changed (e.g.  \"item_id\": UUID )  To log the fields that are modified when an item is updated in the datastore (e.g.  \"fields\": \"password,notes\"   (because the value has to be a string we will have to concat the fields that were updated somehow)   Once an event is registered, we can record it with:  Services.telemetry.recordEvent(category, method, object, null, extra)  When recording, we can use  null  for  value .  See the Events section for specific examples of event registration and recording.", 
            "title": "Event Registration and Recording"
        }, 
        {
            "location": "/metrics/#metrics-overview", 
            "text": "For alpha, we'd like to (ideally) like to be able to track the following general categories of things:   The setup flow, so we can know at what points (if any) people quit the flow before finishing it  Top-level interactions centered around use of the Lockbox toolbar icon. This includes interactions within the initial pop-over that is displayed when the user clicks the icon.  Interactions with the main CRUD editor view which lists the user's Lockbox items (credentials)  Interactions with the add / modify dialogs used to enter / edit item information  Changes to the datastore that actually contains the user's items, in addition to user actions that lead to those changes  When the user submits feedback about lockbox   Each of these are described below within their own Events subsection.", 
            "title": "Metrics Overview"
        }, 
        {
            "location": "/metrics/#non-event-metrics", 
            "text": "These are the metrics we plan to collect regarding the state of user datastores. Note that we won't be able to record these directly for alpha. We will have to infer them from the event data.    n_items  The number of credentials that exist in the user's datastore. Integer    n_notes  The number of items for which the user has manually entered custom notes for. Integer   timestamp_last  The timestamp of the last edit the user made to the datastore. Does not necessarily correspond to the last time they opened the CRUD editor.", 
            "title": "Non-Event Metrics"
        }, 
        {
            "location": "/metrics/#everything-below-here-is-old-and-out-of-date-not-implemented-kept-here-for-future-reference-only", 
            "text": "", 
            "title": "!!!!!!! EVERYTHING BELOW HERE IS OLD AND OUT OF DATE NOT IMPLEMENTED KEPT HERE FOR FUTURE REFERENCE ONLY !!!!!!!"
        }, 
        {
            "location": "/metrics/#setup-events", 
            "text": "From a metrics point of view, the FxA sign-in / account creation process is a black box to us. Thus the best we can do at this point is track when a user interacts with the Lockbox-specific views that are included in the first run flow.  We have two  categories  of events here: rendering events and interaction events:   lockbox_setup.render  and  lockbox_setup.interaction . For rendering events, the  object  field is populated by the name of the view being rendered; for interaction events the  object  is the name of the button. Below is a brief description of the view names and their corresponding buttons.   lockbox_toolbar_firstrun  Pop-over shown when the user first clicks on the Lockbox toolbar icon after install. Contains the  get_started_button . Note that the click on the toolbar icon itself is logged in a separate event (see \"Toolbar Button Interaction Event\" section below).    reenter_password  Shown after FxA process is completed. Prompts user to re-enter their FxA pw to start using lockbox. Contains the  lockbox_signin_button     The  methods  for these events are  render  and  click  for rendering and interaction events, respectively.  The  extra  field contains the user's FxA anonymous/random user id. For  lockbox_toolbar_firstrun  view this will be  null .  To register the rendering events:  Services.telemetry.registerEvents( lockbox_setup.render , {\n   lockbox_setup.render : {\n    methods: [ render ],\n    objects: [ lockbox_toolbar_firstrun , // startup flow views\n             reenter_password ],\n    extra: { fxauid : uid} // value is null in some cases, see above\n  }\n});  To register the interaction events:  Services.telemetry.registerEvents( lockbox_setup.interaction , {\n   lockbox_setup.click : {\n    methods: [ click ],\n    objects: [ get_started_button , // start-up flow buttons\n               lockbox_signin_button ],\n    extra: { fxauid : uid} // value is null in some cases, see above\n  }\n});  An example of how to record a rendering of the  reenter_password  view:  Services.telemetry.recordEvent( lockbox_setup.render ,\n                     render ,\n                     reenter_password ,\n                    null,\n                    { fxauid : uid} ) // user has signed in by now);  To record (for example) a click on one of the  lockboxSignin_button  button:  Services.telemetry.recordEvent( lockbox_setup.interaction ,\n                     click ,\n                     lockbox_signin_button ,\n                    null,\n                    { fxauid : null} ) // user hasn't signed in yet);", 
            "title": "Setup Events"
        }, 
        {
            "location": "/metrics/#item-list-interaction-events", 
            "text": "These events relate to interactions with the item list rendered after a click of the Lockbox toolbar button. These events assume that the user has already logged in with FxA. For events related to the setup flow, see the section above.  Immediately after setup there will be no items in the datastore. As long as this is the case, the item list will be empty and the user will have to click the  add_new_button  to add their first entry. As long as there is at least one entry in the datastore, the item list will be displayed in the left pane.  We will have two categories of events related to the item list:  lockbox_item_list.render  and  lockbox_item_list.interaction . They will be recorded as  lockbox_item_list.render  and  lockbox_item_list.click .  For the rendering events, there are two possible objects,  item_list_empty  and  item_list_populated  corresponding to a rendering of an empty item list and an item list with at least one entry, respectively.  The possible  methods  are  click  and  render .  The  objects  are  item_button  (the clickable area of an entry in the item list),  feedback_button ,  add_new_button  (available so long as there at least one item in the datastore), and  search_box .  To register the interaction events:  Services.telemetry.registerEvents( lockbox_item_list.interaction , {\n   lockbox_item_list.click : {\n    methods: [ click ],\n    objects: [ item_button ,\n         feedback_button ,\n         add_new_button ,\n         search_box ],\n    extra: { fxauid : uid}\n  }\n});  To register the render events:  Services.telemetry.registerEvents( lockbox_item_list.render , {\n   lockbox_item_list.render : {\n    methods: [ render ],\n    objects: [ item_list_empty ,\n         item_list_populated ],\n    extra: { fxauid : uid}\n  }\n});  To record (for example) a click on the add new entry button:  Services.telemetry.recordEvent( lockbox_item_list.interaction ,\n                     click ,\n                     add_new_button ,\n                    null,\n                    { fxauid : uid});", 
            "title": "Item list Interaction Events"
        }, 
        {
            "location": "/metrics/#item-view-interaction-events", 
            "text": "When a user clicks on an item from the item list, they will be directed to the item view. We will log clicks on each of the five buttons in this view (also the  objects  used in the event):  edit_entry_button ,  delete_entry_button ,  show_password_button ,  copy_password_button , and  copy_username_button .  The event  category  is  item_view.interaction  and the event is recorded as  item_view.click .  The  method  is  click .  Example event registration:  Services.telemetry.registerEvents( lockbox_item_view.interaction , {\n   lockbox_item_view.click : {\n    methods: [ click ],\n    objects: [ edit_entry_button ,\n         delete_entry_button ,\n         show_password_button ,\n         copy_password_button ,\n         copy_username_button ],\n    extra: { fxauid : uid}\n  }\n});  Example of recording a click to show password event:  Services.telemetry.recordEvent( lockbox_item_view.interaction ,\n                     click ,\n                     show_password_button ,\n                    null,\n                    { fxauid : uid});", 
            "title": "Item View Interaction Events"
        }, 
        {
            "location": "/metrics/#events-related-to-interactions-in-the-item-editors", 
            "text": "These events record actions users take in the item editors. There are separate views for editing existing items and for adding new entries, though the fields that exist in each are similar. Thus we have four  categories  of events:  lockbox_new_item.interaction ,  lockbox_edit_item.interaction  and the rendering events  lockbox_new_item.render  and  lockbox_edit_item.render .  For events related to the submission of actual item information, see the next section. The item editors have 5 fields:  title_field ,  origin_field  (URL for the credential),  username_field ,  password_field , and  notes_field . There are also three buttons:  save_entry_button ,  cancel_button , and  toggle_password_button . The latter toggles the visibility of characters in the password field.    The  methods  are  click  and  render .  Example event registration (Substitute  lockbox_new_item  with  lockbox_edit_item  to register events for the existing item editor):  Services.telemetry.registerEvents( lockbox_new_item.interaction , {\n   lockbox_item_editor.click : {\n    methods: [ click ],\n    objects: [ title_field ,\n         origin_field ,\n         username_field ,\n         password_field ,\n         notes_field ,\n         save_entry_button ,\n         cancel_button ,\n         toggle_password_button ],\n    extra: { fxauid : uid}\n  }\n});  For the rendering events:  Services.telemetry.registerEvents( lockbox_new_item.render , {\n   lockbox_item_editor.render : {\n    methods: [ render ],\n    objects: [ lockbox_new_item_view ],\n    extra: { fxauid : uid}\n  }\n});  Example of recording a click on the  save_entry_button :  Services.telemetry.recordEvent( lockbox_item_editor.interaction ,\n                     click ,\n                     save_entry_button ,\n                    null,\n                    { fxauid : uid});", 
            "title": "Events Related to Interactions in the Item Editors"
        }, 
        {
            "location": "/metrics/#events-related-to-submitting-an-item-change-from-the-item-editors", 
            "text": "Events of  category   lockbox_item_change_submitted  record the actual submission of new item information to the datastore (either completely new entries or updates to existing items).  In theory, these should be tied to equivalent events in the datastore, so that (for example) an  adding  event which is logged when a user submits a new item has a corresponding  added  event that gets logged when the item is successfully added to the datastore. This may need to change, but for simplicity's sake I've made it as close to the datastore events as possible (see next section). These events will be recorded as  lockbox_item_change_submitted .  Methods  for this event are  adding ,  updating  and  deleting .  The  object  can be  new_item  or  edit_item .  The  extra  field contains the item's UUID  for updating and deleting events only . For adding events, it always contains the string \"new\".  To register these events, we would do something like:  Services.telemetry.registerEvents( lockbox_item_change_submitted , {\n   lockbox_item_change_submitted : {\n    methods: [ adding , updating , deleting ],\n    objects: [ new_item , edit_item ],\n    extra: { fxauid : uid,\n             item_id : UUID}\n  }\n});  To record a new item submission (note the  item_id  is \"new\"):  Services.telemetry.recordEvent( lockbox_item_change_submitted ,\n                     added ,\n                     new_item ,\n                    null,\n                    { fxauid : uid,\n                     item_id :  new });", 
            "title": "Events Related to Submitting An Item Change from the Item Editors"
        }, 
        {
            "location": "/metrics/#events-related-to-changes-in-the-datastore", 
            "text": "We will record an event of  category   lockbox_datastore.changed  when there is a change to the datastore. These events will be recorded as  lockbox_entry_changed .  Methods  for this event are  added ,  updated  and  deleted .  The  object  field is always  datastore .  The  extra  field contains the item's (hashed) UUID. This will allow us to track changes to an item over its lifetime. When the method is  updated , this field also includes a list indicating which fields in the credential were updated.  To register these events, we would do something like:  Services.telemetry.registerEvents( lockbox_datastore.changed , {\n   lockbox_entry_changed : {\n    methods: [ added , updated , deleted ],\n    objects: [ datastore ],\n    extra: {  fxauid : uid,\n     item_id : UUID,\n     fields :  title,origins,login.password,login.notes  }  }\n});  An example of logging an item update in the datastore:  Services.telemetry.recordEvent( lockbox_database.changed ,\n                     updated ,\n                     datastore ,\n                    null,\n                    { fxauid : uid,\n                     item_id : UUID,\n                     fields :  username,password });", 
            "title": "Events Related to Changes in the Datastore"
        }, 
        {
            "location": "/metrics/#feedback-events", 
            "text": "When the user enters the feedback form through the button on the item list, we will record an event when a user submits feedback. Note that this will  not  contain the feedback itself: that is logged elsewhere (not thru telemetry).  Services.telemetry.registerEvents( lockbox_feedback.interaction , {\n   lockbox_feedback_submit.click : {\n    methods: [ click ],\n    objects: [ submit_button ],\n    extra: { fxauid : uid}\n  }\n});  To record (for example) a click of the toolbar:  Services.telemetry.recordEvent( lockbox_feedback.interaction ,\n                     click ,\n                     submit_button ,\n                    null,\n                    { fxauid : uid});", 
            "title": "Feedback Events"
        }, 
        {
            "location": "/metrics/#fill-events-tbd", 
            "text": "This section will describe the events related to auto-filling login credentials on web forms using items from the datastore. Since this isn't invented yet, its empty.", 
            "title": "Fill Events: TBD"
        }, 
        {
            "location": "/metrics/#references", 
            "text": "Docs for the Public JS API that allows us to log events thru an add-on:  https://firefox-source-docs.mozilla.org/toolkit/components/telemetry/telemetry/collection/events.html#the-api", 
            "title": "References"
        }, 
        {
            "location": "/releases/", 
            "text": "Releases\n\n\nChecklist\n\n\nBefore a release can be made, the following must be done:\n\n\n\n\nAny user stories labeled as \nepic\n to be included in the release are approved by Product and PI\n\n\nAll finished work is verified to work as expected and committed to \nmaster\n\n\nAny unfinished work has been triaged and assigned to the appropriate milestone\n\n\nProduct, Engineering, and PI have voiced approval to release (e.g., via Slack team channel)\n\n\n\n\nInstructions\n\n\nNOTE:\n these instructions assume:\n\n\n\n\nAll of the \nchecklist items\n are complete\n\n\nYou are an administrator of the project \nlockbox-extension\n\n\nYour local git working copy has a remote named \nupstream\n pointing to \ngit@github.com:mozilla-lockbox/lockbox-extension.git\n\n\n\n\nTo generate the next release binary:\n\n\n\n\nUpdate \"version\" in package.json (and package-lock.json)\n\n\nwe follow the \nsemver\n syntax\n\n\nAlpha\n releases will be labeled with \"-alpha\" (e.g., \"0.1.0-alpha\")\n\n\nBeta\n releases will be labeled with \"-beta\" (e.g., \"1.0.0-beta\")\n\n\nStable\n releases will \nnot\n be labeled, and follow semver from the last Beta release (e.g., \"1.0.0\")\n\n\n\n\n\n\nUpdate \ndocs/release-notes.md\n:\n\n\nlatest release is at the top, under a second-level header\n\n\neach release includes the sub headings \"What's New\", \"What's Fixed\", and \"Known Issues\"\n\n\nconsult with Product Management on wording if needed\n\n\n\n\n\n\nCommit and ultimately merge to \nmaster\n branch\n\n\nMerge the \nmaster\n branch into \nproduction\n branch and push to GitHub:\n\n\ngit checkout master\n\n\ngit pull upstream master\n (to make sure you have the latest)\n\n\ngit checkout production\n\n\ngit pull upstream production\n (to make sure you have the latest)\n\n\ngit merge master\n\n\ngit push upstream production\n\n\nTest Pilot's Jenkins will now build and sign the extension (see \n\"Extension Signing\"\n)\n\n\n\n\n\n\nTag the latest commit on \nproduction\n branch with an annotated version and push the tag:\n\n\ngit tag -a -m \"Release 0.1.0\" 0.1.0\n\n\ngit push upstream 0.1.0\n\n\nTravis-CI will build and generate a GitHub Release\n\n\n\n\n\n\nEdit the resulting GitHub Release\n\n\nSet the GitHub Release title to match the version\n\n\nSet the GitHub Release notes to match the \ndocs/release-notes.md\n\n\nDownload the signed add-on: \nwget -O signed-addon.xpi https://testpilot.firefox.com/files/lockbox@mozilla.com/latest\n\n\nAttach to the GitHub Release the downloaded signed add-on\n\n\n\n\n\n\nSend an announcement to the team (e.g., via Slack team channel)\n\n\n\n\nExtension Signing\n\n\nLearn about the Test Pilot extension deployment and hosting process here:\n\nhttps://github.com/mozilla/testpilot/blob/master/docs/development/hosting.md\n\n\nThis repository is in the \n\"testpilot-mozillaextension\"\n Jenkins pipeline.\nThe CloudOps team manages access to, and can help report on, the status of the\nbuilds.\n\n\nThe resulting files deployed are:\n\n\n\n\nUpdates file for automatic browser extension updates: \nhttps://testpilot.firefox.com/files/lockbox@mozilla.com/updates.json\n\n\nLatest version of the signed extension XPI: \nhttps://testpilot.firefox.com/files/lockbox@mozilla.com/latest\n\n\n\n\nIMPORTANT:\n Test Pilot reports the status of build, signing, and deployment of its artifacts on the IRC channel \n#testpilot-bots\n.  Be sure to join the channel prior to pushing the \nproduction\n branch to GitHub in order to receive the status updates.", 
            "title": "Releases"
        }, 
        {
            "location": "/releases/#releases", 
            "text": "", 
            "title": "Releases"
        }, 
        {
            "location": "/releases/#checklist", 
            "text": "Before a release can be made, the following must be done:   Any user stories labeled as  epic  to be included in the release are approved by Product and PI  All finished work is verified to work as expected and committed to  master  Any unfinished work has been triaged and assigned to the appropriate milestone  Product, Engineering, and PI have voiced approval to release (e.g., via Slack team channel)", 
            "title": "Checklist"
        }, 
        {
            "location": "/releases/#instructions", 
            "text": "NOTE:  these instructions assume:   All of the  checklist items  are complete  You are an administrator of the project  lockbox-extension  Your local git working copy has a remote named  upstream  pointing to  git@github.com:mozilla-lockbox/lockbox-extension.git   To generate the next release binary:   Update \"version\" in package.json (and package-lock.json)  we follow the  semver  syntax  Alpha  releases will be labeled with \"-alpha\" (e.g., \"0.1.0-alpha\")  Beta  releases will be labeled with \"-beta\" (e.g., \"1.0.0-beta\")  Stable  releases will  not  be labeled, and follow semver from the last Beta release (e.g., \"1.0.0\")    Update  docs/release-notes.md :  latest release is at the top, under a second-level header  each release includes the sub headings \"What's New\", \"What's Fixed\", and \"Known Issues\"  consult with Product Management on wording if needed    Commit and ultimately merge to  master  branch  Merge the  master  branch into  production  branch and push to GitHub:  git checkout master  git pull upstream master  (to make sure you have the latest)  git checkout production  git pull upstream production  (to make sure you have the latest)  git merge master  git push upstream production  Test Pilot's Jenkins will now build and sign the extension (see  \"Extension Signing\" )    Tag the latest commit on  production  branch with an annotated version and push the tag:  git tag -a -m \"Release 0.1.0\" 0.1.0  git push upstream 0.1.0  Travis-CI will build and generate a GitHub Release    Edit the resulting GitHub Release  Set the GitHub Release title to match the version  Set the GitHub Release notes to match the  docs/release-notes.md  Download the signed add-on:  wget -O signed-addon.xpi https://testpilot.firefox.com/files/lockbox@mozilla.com/latest  Attach to the GitHub Release the downloaded signed add-on    Send an announcement to the team (e.g., via Slack team channel)", 
            "title": "Instructions"
        }, 
        {
            "location": "/releases/#extension-signing", 
            "text": "Learn about the Test Pilot extension deployment and hosting process here: \nhttps://github.com/mozilla/testpilot/blob/master/docs/development/hosting.md  This repository is in the  \"testpilot-mozillaextension\"  Jenkins pipeline.\nThe CloudOps team manages access to, and can help report on, the status of the\nbuilds.  The resulting files deployed are:   Updates file for automatic browser extension updates:  https://testpilot.firefox.com/files/lockbox@mozilla.com/updates.json  Latest version of the signed extension XPI:  https://testpilot.firefox.com/files/lockbox@mozilla.com/latest   IMPORTANT:  Test Pilot reports the status of build, signing, and deployment of its artifacts on the IRC channel  #testpilot-bots .  Be sure to join the channel prior to pushing the  production  branch to GitHub in order to receive the status updates.", 
            "title": "Extension Signing"
        }
    ]
}